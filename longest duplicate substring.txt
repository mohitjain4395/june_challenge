class Solution {
    int prime=10000001;
    vector <int> power;
    string rabin_karp(string s, int len, int n)
    {
        if(len==0) return "";
        int cur=0;
        unordered_map<int, vector<int> > hash;
        for(int i=0;i<len;i++)
            cur=(cur*26+(s[i]-97))%prime;
        hash[cur]={0};
        string str="";
        for(int i=len;i<n;i++)
        {
            cur=((cur-power[len-1]*(s[i-len]-97))%prime+prime)%prime;
            cur=(cur*26+(s[i]-97))%prime;
            
            if(hash.find(cur)==hash.end()) //matlab nhi h map me
                hash[cur]={i-len+1};
            else
            {
                for(int index: hash[cur])
                {
                    str=s.substr(i-len+1, len);
                    if(s.substr(index, len)==str)
                        return str;
                }
                hash[cur].push_back({i-len+1});
            }
        }
        return "";
    }
    
public:
    string longestDupSubstring(string S) {
        int n=S.length();
        int l=0, r=n-1;
        
        power=vector <int> (n);
        power[0]=1;
        for(int i=1;i<n;i++)
            power[i]=(power[i-1]*26)%prime;
        string res="", curr="";
        int mid;
        while(l<=r)
        {
            mid=l+(r-l)/2;
            curr=rabin_karp(S,mid, n);
            if(curr.length() > res.length())
            {
                res=curr;
                l=mid+1;
            }
            else
                r=mid-1;
        }
        return res;
    }
};