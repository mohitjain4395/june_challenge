class Trie
{
    public:
    bool isEnd;
    Trie *children[26];
    Trie()
    {
        isEnd=false;
        for(int i=0;i<26;i++)
            children[i]=NULL;
    }
    ~Trie()
    {
        for(int i=0;i<26;i++)
            if(children[i]==NULL) delete children[i];
    }
    void insert(string word)
    {
        Trie *curr=this;
        for(char c: word)
        {
            if(curr->children[c-97]==NULL)
                curr->children[c-97]=new Trie();
            curr=curr->children[c-97];
        }
        curr->isEnd=true;
    }
};

class Solution {
public:
    void dfs(vector<vector<char>>& board, int i, int j,unordered_set <string> &result,Trie *trie, string s)
    {
        char c=board[i][j];
        if(c=='#') return;
        board[i][j]='#';
        Trie *t=trie->children[c-97];
        if(t)
        {
            if(t->isEnd) result.insert(s+c);
            if(i<board.size()-1) dfs(board,i+1,j,result,t,s+c);
            if(j<board[0].size()-1) dfs(board,i,j+1,result,t,s+c);
            if(i>0) dfs(board,i-1,j,result,t,s+c);
            if(j>0) dfs(board,i,j-1,result,t,s+c);
        }
        board[i][j]=c;
    }
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        if(words.size()==0) return {};
        Trie trie;
        for(string s: words)
            trie.insert(s);
        unordered_set <string> result;
        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                dfs(board,i,j,result,&trie,"");
            }
        }
        vector <string> res(result.begin(),result.end());
        return res;
    }
};